//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// near term

- floating creeps
- a hitless group connector. hitless blocks in general (background)

- possible perf improvement: shared spritestates for non-actor anim blocks. example: a big castle with lots of spikes. no sense spinning up an animstate and paying to update it for each spike if they are all identical anyways. this only works if they are supposed to be identically in sync. profile first to verify suspicion that this scenario is expensive. I think it adds like 2 or 3 ms to world update for a moderate-large number of spikes.

- geobackground v1, just to get parallax up and running.

- test level: tower of babel. need to get the "distance from origin" thing figured out.
  - why can't we handle negatives in edit anyways? pretty sure play is fine. maybe we can replace the key-gen-requires-positive-coord thing (is that what's happening)? can use space partition collision detection and allow overlapping blocks :)

- sanity check: does dpad still listen during edit? seems like dpad is offcenter after editing, or did my hands just shift.

- fix death state. gibs are weird, camera sometimes flies away, and actor's original block appears to still be hit testing (or did I fix that already?)

- button v1? also need horizontal button kits.

- need a physics constants pass once most stuff is working
- tweak air friction to less

- investigate build mode, being the secondary button mode that allows you to directly manipulate the level within designated hotspots.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// future

- implement the restricted rect version of EWorldView drawToContext for better perf while drawing blocks.
  - you already are culling to view rect in the main grid document drawer, but I think there's an optional separate version of the draw method that only updates a certain rect. then we can invalidate just specific parts of the screen when drawing/erasing, should make editing snappier (until the user pans/zooms).

- core, low pri: handling of sprite and preset constants is pretty ugly. should make this more dynamic and compact.

- revisit how groups are instantiated/added to world and er. can probably be cleaned up, not essential.

- world layers

- z-index? can we use depth buffer? do layers cover this?

- beams



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// edit. claim: investing in edit makes play exponentially more awesome.

- TODO: putting these way down here makes them lower priority but they are not so, should interleave.

- cut/copy/paste. for copy, you've been picturing this intelligent edge trimming algorithm, but we can probably do without that for now and just trust author to make convenient copies (which handles 95% of actual use cases). i.e. drop blocks not entirely in copy region.

- would be cool to have like 3 to 4 draw slots so I can rapidly choose between several presets, can be pre-pop'd too.

- undo stack
