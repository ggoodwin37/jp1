//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// near term

- fix opposer thing

- floating creeps

- bg: need to add concept of offset per strip. this will allow us to stagger layers and also be animatable for moving clouds etc.

- fix death state. gibs are weird, camera sometimes flies away, and actor's original block appears to still be hit testing (or did I fix that already?)

- button v1? also need horizontal button kits.

- need a physics constants pass once most stuff is working
- tweak air friction to less

- investigate build mode, being the secondary button mode that allows you to directly manipulate the level within designated hotspots.

- scenario: pushing a crate while standing on a wide moving platform. nothing happens, something to do with not doing parallel prop more than once for a given block. I think this might be an intentional recursion stop, maybe adding a depth parameter to allow a few more recursions would benefit gameplay. downside is that big stacks of crates might misbehave.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// future

- implement the restricted rect version of EWorldView drawToContext for better perf while drawing blocks.
  - you already are culling to view rect in the main grid document drawer, but I think there's an optional separate version of the draw method that only updates a certain rect. then we can invalidate just specific parts of the screen when drawing/erasing, should make editing snappier (until the user pans/zooms).

- core, low pri: handling of sprite and preset constants is pretty ugly. should make this more dynamic and compact.

- revisit how groups are instantiated/added to world and er. can probably be cleaned up, not essential.

- world layers
  o a hitless group connector. hitless blocks in general (background) (these won't be good unless we have a dedicated background layer or other mechanism for specifying z, since currently draw order is essentially random).

- z-index? can we use depth buffer? do layers cover this?
  - (I think layers cover this)

- beams

- possible perf improvement: shared spritestates for non-actor anim blocks. example: a big castle with lots of spikes. no sense spinning up an animstate and paying to update it for each spike if they are all identical anyways. this only works if they are supposed to be identically in sync. profile first to verify suspicion that this scenario is expensive. I think it adds like 2 or 3 ms to world update for a moderate-large number of spikes.
  - doesn't appear to be super bad, can wait.



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// edit. claim: investing in edit makes play exponentially more awesome.

- TODO: putting these way down here makes them lower priority but they are not so, should interleave.

- cut/copy/paste. for copy, you've been picturing this intelligent edge trimming algorithm, but we can probably do without that for now and just trust author to make convenient copies (which handles 95% of actual use cases). i.e. drop blocks not entirely in copy region.

- would be cool to have like 3 to 4 draw slots so I can rapidly choose between several presets, can be pre-pop'd too.

- undo stack

- edit mode should be able to handle negative world coords. this is stupid, and requires several workarounds later that need to be removed: have to start the edit camera way far from origin so level has room to go up or left. then we normalize everything on play-load, which is slow and probably not even necessary. if we could simply use negative coords in edit this would be so much simpler and faster. I know there are a few fmaxf's here and there, but what is the real reason we can't use negative coords? is it just because they are used as keys in a table? negatives probably work with that anyways.
