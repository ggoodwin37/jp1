9-9-2013

It's time to start the Next Big Feature. Just need to decide what it is. Or maybe I should procrastinate and just add some new art and monsters. Yeah, that sounds pretty good.

Need to do some thought experimentation around the build mode button (b-mode). This may really be the feature I was looking for but need to convince myself more before dropping lots of hours on implementation.

Todos:
x fix falling v issue introduced recently.
x add to ER API:
  x(NSArray *)blocksOverlappingRect:(EmuRect)rect;
  this will be used for b-mode (detect what blocks are under touch point) and also used to kill stuff when a redblu turns on. Eventually might be useful for beams or trigger zones. The input rect could correspond to a block or just a 1x1 rect for a touch point.

start prototyping b-mode. for now can just disable d-pad input and add in b-mode input handler. Time slows down. Direct manipulation of some blocks (do we need a special blockProp for these types of blocks?). WorldView can turn on coloring mode for moveable blocks. When a block is getting moved, it should gain velocity. Would be cool to be able to throw blocks somehow, not sure how to implement this with time slowing down though.

idea: stars. these are secret/challenge collectibles. not sure what reward will be, for now just successfully collecting them and finishing the level will be enough. at load time, we count how many stars there are, then show that many grey outlines in upper left. as they collect stars the outlines fill in. the stars should be placed such that they are hard/hidden/interesting to get, with the expectation that the user must still make it back to the exit for the stars to "count".

- test out overlapper code by making redBlus kill you if you are standing inside of one when it turns on. (can just do a check at switch time. no caching of overlappers in place or needed yet).


9-11

roadmap:

- b-mode
  x finish overlapper code in ER
  - branch
  - worldView layer: colored overlays for b-mode. active/inactive, etc.
  - input layer: translate view touches to block*
  - physics: how does dragging blocks work?
  - time input: how do we slow down time? do some spots still need to use real time? (log updater eg).
    - how does direct dragging of blocks work if time is slowed down? gravity will be slowed. so pushes still work by direct propagation, but gravity is effectively off? is that weird?

- layers
  - background sprites
  - event layout
  - generators
  - actor info? maybe all actors should be in a separate layer.

- more assets chunk
  - background tiles
    -
  - more ground
  - more creeps

- long range
  - flesh out event system
  - herds?
  - stars


9-18

Diving in to b-mode, it's looking pretty cool so far (with just time dilation and view hookup, no block moving yet). I worry a bit about ergonomics of switching between regular and b-mode.

I played with the idea of having to hold b-button to stay in b-mode, but this doesn't make sense ergonomically.

- add a button to exit b-mode, can use existing assets for now. I feel like the button should be larger than existing global buttons, say 2x, and located near where the b-mode start button was (but probably should be anchored to screen edge, not dynamic).
- when exiting b-mode, do we need some delay so the player can re-orient their thumbs? hopefully not.
- figure out how the physics are gonna work, essentially we want direct movement only, propagation doesn't occur in b-mode. sharing existing code?
- probably b-movable blocks can't push anything, not even other b-movables. I'm thinking they shouldn't be affected by gravity, or pushable by actors. this will also simplify coding as a nice side effect.

12-9

Haven't checked in for a while since starting at Yahoo. In addition to the b-mode stuff above, should consider moving to new ipad and iphone. I should let go of the idea that this is cheating in performance. The algorithm is pretty good now so should just accept the new speed.

Curious about iPhone support. shouldn't be too hard, first have to get the basic resolution change hooked up, then need to handle secondary plumbing to scale stuff, etc.

You stopped working on b-mode when you had a lot of momentum, will be interesting to see if that makes it easier to resume.

Waiting for apple developer renewal to come through. They have done a good job of making sure I curse Apple's name every time I have to pay this fee. Then making me wait "within 24 hours" adds insult to injury :)

12-11

Need to figure out how to get the build up and running. UIStepper doesn't compile.

12-12

Got it running on new iPad fairly smoothly.

Tried to get it running on iPhone. Probably need to put some effort into having a different launcher on the phone. Right now MainWindow.xib always loads the iPad-sized launcher (original JumpProtoLaunchViewController). Add a lower layer that can choose between this launcher or the phone one? Should really share some code between the two instead of the copy & paste job you have now.

I modified the original launcher xib just to see what play mode looked like on the phone. it looks fairly broken, so there's some work there too.


1-28-14

after a little break, I'm here to get the iPhone version set up.

plan: remove hardcoded connection to jumpProtoLaunchVC in MainWindow nib. instead set this up dynamically (depending on device) in JumpProtoAppDelegate.

TODO: jumpProtoLaunchViewController is really a base class for -ipad and -phone versions. almost all code is shared.

